)]}'
{"version":3,"sources":["media/js/util/message.js","media/js/models.js","media/js/views/browser.js","media/js/views/room.js","media/js/views/status.js","media/js/views/window.js","media/js/views/panes.js","media/js/views/modals.js","media/js/views/upload.js","media/js/views/client.js","media/js/client.js","media/js/chat.js"],"names":[],"mappingsygBCjgBCjfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBCtwBChPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gggBC7GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBC5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBCpiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["'use strict';\n\nif (typeof window !== 'undefined' && typeof exports === 'undefined') {\n    if (typeof window.utils !== 'object') {\n        window.utils = {};\n    }\n}\n\nif (typeof exports !== 'undefined') {\n    var _ = require('underscore');\n}\n\n(function(exports) {\n    //\n    // Message Text Formatting\n    //\n\n\n    function encodeEntities(value) {\n        return value.\n            replace(/&/g, '&amp;').\n            replace(surrogatePairRegexp, function(value) {\n                var hi = value.charCodeAt(0),\n                    low = value.charCodeAt(1);\n                return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n            }).\n            replace(nonAlphanumericRegexp, function(value) {\n                return '&#' + value.charCodeAt(0) + ';';\n            }).\n            replace(/</g, '&lt;').\n            replace(/>/g, '&gt;');\n    }\n\n    function getBaseUrl() {\n        var parts = window.location.pathname.split('/');\n\n        parts = _.filter(parts, function(part) {\n            return part.length;\n        });\n\n        var path = window.location.origin;\n\n        if (parts.length) {\n            path = path + '/' + parts.join('/');\n        }\n\n        return path + '/';\n    }\n\n    function trim(text) {\n        return text.trim();\n    }\n\n    function mentions(text) {\n        var mentionPattern = /\\B@([\\w\\.]+)(?!@)\\b/g;\n        return text.replace(mentionPattern, '<span class=\"lcb-message-mention\">@$1</span>');\n    }\n\n    function roomLinks(text, data) {\n        if (!data.rooms) {\n            return text;\n        }\n\n        var slugPattern = /\\B(\\#[a-z0-9_]+)\\b/g;\n\n        return text.replace(slugPattern, function(slug) {\n            var s = slug.substring(1);\n            var room = data.rooms.find(function(room) {\n                return room.attributes.slug === s;\n            });\n\n            if (!room) {\n                return slug;\n            }\n\n            return '<a href=\"#!/room/' + room.id + '\">&#35;' + s + '</a>';\n        });\n    }\n\n    function uploads(text) {\n        var pattern = /^\\s*(upload:\\/\\/[-A-Z0-9+&*@#\\/%?=~_|!:,.;'\"!()]*)\\s*$/i;\n\n        return text.replace(pattern, function(url) {\n            return getBaseUrl() + url.substring(9);\n        });\n    }\n\n    function links(text) {\n        if (imagePattern.test(text)) {\n            return text.replace(imagePattern, function(url) {\n                var uri = encodeEntities(_.unescape(url));\n                return '<a class=\"thumbnail\" href=\"' + uri +\n                       '\" target=\"_blank\" rel=\"noreferrer nofollow\"><img src=\"' + uri +\n                       '\" alt=\"Pasted Image\" /></a>';\n            });\n        } else {\n            return text.replace(linkPattern, function(url) {\n                var uri = encodeEntities(_.unescape(url));\n                return '<a href=\"' + uri + '\" target=\"_blank\" rel=\"noreferrer nofollow\">' + url + '</a>';\n            });\n        }\n    }\n\n    function emotes(text, data) {\n        var regex = new RegExp('\\\\B(:[a-z0-9_\\\\+\\\\-]+:)[\\\\b]?', 'ig');\n\n        return text.replace(regex, function(group) {\n            var key = group.split(':')[1];\n            var emote = _.find(data.emotes, function(emote) {\n                return emote.emote === key;\n            });\n\n            if (!emote) {\n                return group;\n            }\n\n            var image = _.escape(emote.image),\n                emo = _.escape(':' + emote.emote + ':'),\n                size = _.escape(emote.size || 20);\n\n            return '<img class=\"emote\" src=\"' + image + '\" title=\"' + emo + '\" alt=\"' + emo + '\" width=\"' + size + '\" height=\"' + size + '\" />';\n        });\n    }\n\n    function replacements(text, data) {\n        _.each(data.replacements, function(replacement) {\n            text = text.replace(new RegExp(replacement.regex, 'ig'), replacement.template);\n        });\n        return text;\n    }\n\n    var surrogatePairRegexp = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\n        // Match everything outside of normal chars and \" (quote character)\n        nonAlphanumericRegexp = /([^\\#-~| |!])/g,\n        imagePattern = /^\\s*((https?|ftp):\\/\\/[-A-Z0-9\\u00a1-\\uffff+&@#\\/%?=~_|!:,.;'\"!()]*[-A-Z0-9\\u00a1-\\uffff+&@#\\/%=~_|][.](jpe?g|png|gif))\\s*(\\?[\\w-]+(=[\\w-]*)?(&[\\w-]+(=[\\w-]*)?)*)?$/i,\n        linkPattern = /((https?|ftp):\\/\\/[-A-Z0-9\\u00a1-\\uffff+&*@#\\/%?=~_|!:,.;'\"!()]*[-A-Z0-9\\u00a1-\\uffff+&@#\\/%=~_|])/ig;\n\n    exports.format = function(text, data) {\n        var pipeline = [\n            trim,\n            mentions,\n            roomLinks,\n            uploads,\n            links,\n            emotes,\n            replacements\n        ];\n\n        _.each(pipeline, function(func) {\n            text = func(text, data);\n        });\n\n        return text;\n    };\n\n})(typeof exports === 'undefined' ? window.utils.message = {} : exports);","//\n// LCB Models\n//\n\nvar UserModel = Backbone.Model.extend();\n\nvar UsersCollection = Backbone.Collection.extend({\n    model: UserModel\n});\n\nvar MessageModel = Backbone.Model.extend();\n\nvar MessagesCollection = Backbone.Collection.extend({\n    model: MessageModel\n});\n\nvar FileModel = Backbone.Model.extend();\n\nvar FilesCollection = Backbone.Collection.extend({\n    model: FileModel\n});\n\nvar RoomModel = Backbone.Model.extend({\n    initialize: function() {\n        this.messages = new MessagesCollection();\n        this.users = new UsersCollection();\n        this.files = new FilesCollection();\n        this.lastMessage = new Backbone.Model();\n        //\n        // Child events\n        //\n        this.users.on('add', _.bind(function(user) {\n            this.trigger('users:add', user, this);\n        }, this));\n        this.users.on('remove', function(user) {\n            this.trigger('users:remove', user, this);\n        }, this);\n    },\n    loaded: false\n});\n\nvar RoomsCollection = Backbone.Collection.extend({\n    model: RoomModel,\n    initialize: function() {\n        this.current = new Backbone.Model();\n        this.last = new Backbone.Model();\n    }\n});","/*\n * BROWSER VIEW\n * This is the \"All Rooms\" browser!\n */\n\n'use strict';\n\n+function(window, $, _) {\n\n    window.LCB = window.LCB || {};\n\n    window.LCB.BrowserView = Backbone.View.extend({\n        events: {\n            'submit .lcb-rooms-add': 'create',\n            'keyup .lcb-rooms-browser-filter-input': 'filter',\n            'change .lcb-rooms-switch': 'toggle',\n            'click .lcb-rooms-switch-label': 'toggle'\n        },\n        initialize: function(options) {\n            this.client = options.client;\n            this.template = Handlebars.compile($('#template-room-browser-item').html());\n            this.userTemplate = Handlebars.compile($('#template-room-browser-item-user').html());\n            this.rooms = options.rooms;\n            this.rooms.on('add', this.add, this);\n            this.rooms.on('remove', this.remove, this);\n            this.rooms.on('change:description change:name', this.update, this);\n            this.rooms.on('change:lastActive', _.debounce(this.updateLastActive, 200), this);\n            this.rooms.on('change:joined', this.updateToggles, this);\n            this.rooms.on('users:add', this.addUser, this);\n            this.rooms.on('users:remove', this.removeUser, this);\n            this.rooms.on('users:add users:remove add remove', this.sort, this);\n            this.rooms.current.on('change:id', function(current, id) {\n                // We only care about the list pane\n                if (id !== 'list') return;\n                this.sort();\n            }, this);\n        },\n        updateToggles: function(room, joined) {\n            this.$('.lcb-rooms-switch[data-id=' + room.id + ']').prop('checked', joined);\n        },\n        toggle: function(e) {\n            e.preventDefault();\n            var $target = $(e.currentTarget),\n                $input = $target.is(':checkbox') && $target || $target.siblings('[type=\"checkbox\"]'),\n                id = $input.data('id'),\n                room = this.rooms.get(id);\n\n            if (!room) {\n                return;\n            }\n\n            if (room.get('joined')) {\n                this.client.leaveRoom(room.id);\n            } else {\n                this.client.joinRoom(room);\n            }\n        },\n        add: function(room) {\n            var room = room.toJSON ? room.toJSON() : room,\n                context = _.extend(room, {\n                    lastActive: moment(room.lastActive).calendar()\n                });\n            this.$('.lcb-rooms-list').append(this.template(context));\n        },\n        remove: function(room) {\n            this.$('.lcb-rooms-list-item[data-id=' + room.id + ']').remove();\n        },\n        update: function(room) {\n            this.$('.lcb-rooms-list-item[data-id=' + room.id + '] .lcb-rooms-list-item-name').text(room.get('name'));\n            this.$('.lcb-rooms-list-item[data-id=' + room.id + '] .lcb-rooms-list-item-description').text(room.get('description'));\n            this.$('.lcb-rooms-list-item[data-id=' + room.id + '] .lcb-rooms-list-item-participants').text(room.get('participants'));\n        },\n        updateLastActive: function(room) {\n            this.$('.lcb-rooms-list-item[data-id=' + room.id + '] .lcb-rooms-list-item-last-active .value').text(moment(room.get('lastActive')).calendar());\n        },\n        sort: function(model) {\n            var that = this,\n                $items = this.$('.lcb-rooms-list-item');\n            // We only care about other users\n            if (this.$el.hasClass('hide') && model && model.id === this.client.user.id)\n                return;\n            $items.sort(function(a, b){\n                var ar = that.rooms.get($(a).data('id')),\n                    br = that.rooms.get($(b).data('id')),\n                    au = ar.users.length,\n                    bu = br.users.length,\n                    aj = ar.get('joined'),\n                    bj = br.get('joined');\n                if ((aj && bj) || (!aj && !bj)) {\n                    if (au > bu) return -1;\n                    if (au < bu) return 1;\n                }\n                if (aj) return -1;\n                if (bj) return 1;\n                return 0;\n            });\n            $items.detach().appendTo(this.$('.lcb-rooms-list'));\n        },\n        filter: function(e) {\n            e.preventDefault();\n            var $input = $(e.currentTarget),\n                needle = $input.val().toLowerCase();\n            this.$('.lcb-rooms-list-item').each(function () {\n                var haystack = $(this).find('.lcb-rooms-list-item-name').text().toLowerCase();\n                $(this).toggle(haystack.indexOf(needle) >= 0);\n            });\n        },\n        create: function(e) {\n            var that = this;\n            e.preventDefault();\n            var $form = this.$(e.target),\n                $modal = this.$('#lcb-add-room'),\n                $name = this.$('.lcb-room-name'),\n                $slug = this.$('.lcb-room-slug'),\n                $description = this.$('.lcb-room-description'),\n                $password = this.$('.lcb-room-password'),\n                $confirmPassword = this.$('.lcb-room-confirm-password'),\n                $private = this.$('.lcb-room-private'),\n                data = {\n                    name: $name.val().trim(),\n                    slug: $slug.val().trim(),\n                    description: $description.val(),\n                    password: $password.val(),\n                    private: !!$private.prop('checked'),\n                    callback: function success() {\n                        $modal.modal('hide');\n                        $form.trigger('reset');\n                    }\n                };\n\n            $name.parent().removeClass('has-error');\n            $slug.parent().removeClass('has-error');\n            $confirmPassword.parent().removeClass('has-error');\n\n            // we require name is non-empty\n            if (!data.name) {\n                $name.parent().addClass('has-error');\n                return;\n            }\n\n            // we require slug is non-empty\n            if (!data.slug) {\n                $slug.parent().addClass('has-error');\n                return;\n            }\n\n            // remind the user, that users may share the password with others\n            if (data.password) {\n                if (data.password !== $confirmPassword.val()) {\n                    $confirmPassword.parent().addClass('has-error');\n                    return;\n                }\n\n                swal({\n                    title: 'Password-protected room',\n                    text: 'You\\'re creating a room with a shared password.\\n' +\n                          'Anyone who obtains the password may enter the room.',\n                    showCancelButton: true\n                }, function(){\n                    that.client.events.trigger('rooms:create', data);\n                });\n                return;\n            }\n\n            this.client.events.trigger('rooms:create', data);\n        },\n        addUser: function(user, room) {\n            this.$('.lcb-rooms-list-item[data-id=\"' + room.id + '\"]')\n                .find('.lcb-rooms-list-users').prepend(this.userTemplate(user.toJSON()));\n        },\n        removeUser: function(user, room) {\n            this.$('.lcb-rooms-list-item[data-id=\"' + room.id + '\"]')\n                .find('.lcb-rooms-list-user[data-id=\"' + user.id + '\"]').remove();\n        }\n\n    });\n\n}(window, $, _);","/*\n * ROOM VIEW\n * TODO: Break it up :/\n */\n\n'use strict';\n\n+function(window, $, _) {\n\n    window.LCB = window.LCB || {};\n\n    window.LCB.RoomView = Backbone.View.extend({\n        events: {\n            'scroll .lcb-messages': 'updateScrollLock',\n            'keypress .lcb-entry-input': 'sendMessage',\n            'click .lcb-entry-button': 'sendMessage',\n            'click .lcb-room-toggle-sidebar': 'toggleSidebar',\n            'click .show-edit-room': 'showEditRoom',\n            'click .hide-edit-room': 'hideEditRoom',\n            'click .submit-edit-room': 'submitEditRoom',\n            'click .archive-room': 'archiveRoom',\n            'click .lcb-room-poke': 'poke',\n            'click .lcb-upload-trigger': 'upload'\n        },\n        initialize: function(options) {\n            this.client = options.client;\n\n            var iAmOwner = this.model.get('owner') === this.client.user.id;\n            var iCanEdit = iAmOwner || !this.model.get('hasPassword');\n\n            this.model.set('iAmOwner', iAmOwner);\n            this.model.set('iCanEdit', iCanEdit);\n\n            this.template = options.template;\n            this.messageTemplate =\n                Handlebars.compile($('#template-message').html());\n            this.render();\n            this.model.on('messages:new', this.addMessage, this);\n            this.model.on('change', this.updateMeta, this);\n            this.model.on('remove', this.goodbye, this);\n            this.model.users.on('change', this.updateUser, this);\n\n            //\n            // Subviews\n            //\n            this.usersList = new window.LCB.RoomUsersView({\n                el: this.$('.lcb-room-sidebar-users'),\n                collection: this.model.users\n            });\n            this.filesList = new window.LCB.RoomFilesView({\n                el: this.$('.lcb-room-sidebar-files'),\n                collection: this.model.files\n            });\n        },\n        render: function() {\n            this.$el = $(this.template(_.extend(this.model.toJSON(), {\n                sidebar: store.get('sidebar')\n            })));\n            this.$messages = this.$('.lcb-messages');\n            // Scroll Locking\n            this.scrollLocked = true;\n            this.$messages.on('scroll',  _.bind(this.updateScrollLock, this));\n            this.atwhoMentions();\n            this.atwhoAllMentions();\n            this.atwhoRooms();\n            this.atwhoEmotes();\n            this.selectizeParticipants();\n        },\n        atwhoTplEval: function(tpl, map) {\n            var error;\n            try {\n                return tpl.replace(/\\$\\{([^\\}]*)\\}/g, function(tag, key, pos) {\n                    return (map[key] || '')\n                        .replace(/&/g, '&amp;')\n                        .replace(/\"/g, '&quot;')\n                        .replace(/'/g, '&apos;')\n                        .replace(/</g, '&lt;')\n                        .replace(/>/g, '&gt;');\n                });\n            } catch (_error) {\n                error = _error;\n                return \"\";\n            }\n        },\n        getAtwhoUserFilter: function(collection) {\n            var currentUser = this.client.user;\n\n            return function filter(query, data, searchKey) {\n                var q = query.toLowerCase();\n                var results = collection.filter(function(user) {\n                    var attr = user.attributes;\n\n                    if (user.id === currentUser.id) {\n                        return false;\n                    }\n\n                    if (!attr.safeName) {\n                        attr.safeName = attr.displayName.replace(/\\W/g, '');\n                    }\n\n                    var val1 = attr.username.toLowerCase();\n                    var val1i = val1.indexOf(q);\n                    if (val1i > -1) {\n                        attr.atwho_order = val1i;\n                        return true;\n                    }\n\n                    var val2 = attr.safeName.toLowerCase();\n                    var val2i = val2.indexOf(q);\n                    if (val2i > -1) {\n                        attr.atwho_order = val2i + attr.username.length;\n                        return true;\n                    }\n\n                    return false;\n                });\n\n                return results.map(function(user) {\n                    return user.attributes;\n                });\n            };\n        },\n        atwhoMentions: function () {\n\n            function sorter(query, items, search_key) {\n                return items.sort(function(a, b) {\n                    return a.atwho_order - b.atwho_order;\n                });\n            }\n            var options = {\n                at: '@',\n                tpl: '<li data-value=\"@${username}\"><img src=\"https://www.gravatar.com/avatar/${avatar}?s=20\" height=\"20\" width=\"20\" /> @${username} <small>${displayName}</small></li>',\n                callbacks: {\n                    filter: this.getAtwhoUserFilter(this.model.users),\n                    sorter: sorter,\n                    tpl_eval: this.atwhoTplEval\n                }\n            };\n\n            this.$('.lcb-entry-input').atwho(options);\n        },\n        atwhoAllMentions: function () {\n            var that = this;\n\n            function filter(query, data, searchKey) {\n                var users = that.client.getUsersSync();\n                var filt = that.getAtwhoUserFilter(users);\n                return filt(query, data, searchKey);\n            }\n\n            function sorter(query, items, search_key) {\n                return items.sort(function(a, b) {\n                    return a.atwho_order - b.atwho_order;\n                });\n            }\n\n            var options = {\n                at: '@@',\n                tpl: '<li data-value=\"@${username}\"><img src=\"https://www.gravatar.com/avatar/${avatar}?s=20\" height=\"20\" width=\"20\" /> @${username} <small>${displayName}</small></li>',\n                callbacks: {\n                    filter: filter,\n                    sorter: sorter,\n                    tpl_eval: that.atwhoTplEval\n                }\n            };\n\n            this.$('.lcb-entry-input').atwho(options);\n\n            var opts = _.extend(options, { at: '@'});\n            this.$('.lcb-entry-participants').atwho(opts);\n            this.$('.lcb-room-participants').atwho(opts);\n        },\n        selectizeParticipants: function () {\n            var that = this;\n\n            this.$('.lcb-entry-participants').selectize({\n                delimiter: ',',\n                create: false,\n                load: function(query, callback) {\n                    if (!query.length) return callback();\n\n                    var users = that.client.getUsersSync();\n\n                    var usernames = users.map(function(user) {\n                        return user.attributes.username;\n                    });\n\n                    usernames = _.filter(usernames, function(username) {\n                        return username.indexOf(query) !== -1;\n                    });\n\n                    users = _.map(usernames, function(username) {\n                        return {\n                            value: username,\n                            text: username\n                        };\n                    });\n\n                    callback(users);\n                }\n            });\n        },\n        atwhoRooms: function() {\n            var rooms = this.client.rooms;\n\n            function filter(query, data, searchKey) {\n                var q = query.toLowerCase();\n                var results = rooms.filter(function(room) {\n                    var val = room.attributes.slug.toLowerCase();\n                    return val.indexOf(q) > -1;\n                });\n\n                return results.map(function(room) {\n                    return room.attributes;\n                });\n            }\n\n            this.$('.lcb-entry-input')\n                .atwho({\n                    at: '#',\n                    search_key: 'slug',\n                    callbacks: {\n                        filter: filter,\n                        tpl_eval: this.atwhoTplEval\n                    },\n                    tpl: '<li data-value=\"#${slug}\">#${slug} <small>${name}</small></li>'\n                });\n        },\n        atwhoEmotes: function() {\n            var that = this;\n            this.client.getEmotes(function(emotes) {\n                that.$('.lcb-entry-input')\n                .atwho({\n                    at: ':',\n                    search_key: 'emote',\n                    data: emotes,\n                    tpl: '<li data-value=\":${emote}:\"><img src=\"${image}\" height=\"32\" width=\"32\" alt=\":${emote}:\" /> :${emote}:</li>'\n                });\n            });\n        },\n        goodbye: function() {\n            swal('Archived!', '\"' + this.model.get('name') + '\" has been archived.', 'warning');\n        },\n        updateMeta: function() {\n            var that = this;\n            this.$('.lcb-room-heading .name').text(this.model.get('name'));\n            this.$('.lcb-room-heading .slug').text('#' + this.model.get('slug'));\n            this.$('.lcb-room-participants').text(this.model.get('participants'));\n            this.formatMessage(_.escape(this.model.get('description')), function(html) {\n              that.$('.lcb-room-description').html(html);\n            });\n        },\n        showEditRoom: function(e) {\n            if (e) {\n                e.preventDefault();\n            }\n\n            var $modal = this.$('.lcb-room-edit'),\n                $name = $modal.find('input[name=\"name\"]'),\n                $description = $modal.find('textarea[name=\"description\"]'),\n                $password = $modal.find('input[name=\"password\"]'),\n                $confirmPassword = $modal.find('input[name=\"confirmPassword\"]');\n\n            $name.val(this.model.get('name'));\n            $description.val(this.model.get('description'));\n            $password.val('');\n            $confirmPassword.val('');\n\n            $modal.modal();\n        },\n        hideEditRoom: function(e) {\n            if (e) {\n                e.preventDefault();\n            }\n            this.$('.lcb-room-edit').modal('hide');\n        },\n        submitEditRoom: function(e) {\n            if (e) {\n                e.preventDefault();\n            }\n\n            var $modal = this.$('.lcb-room-edit'),\n                $name = $modal.find('input[name=\"name\"]'),\n                $description = $modal.find('textarea[name=\"description\"]'),\n                $password = $modal.find('input[name=\"password\"]'),\n                $confirmPassword = $modal.find('input[name=\"confirmPassword\"]'),\n                $participants =\n                    this.$('.edit-room textarea[name=\"participants\"]');\n\n            $name.parent().removeClass('has-error');\n            $confirmPassword.parent().removeClass('has-error');\n\n            if (!$name.val()) {\n                $name.parent().addClass('has-error');\n                return;\n            }\n\n            if ($password.val() && $password.val() !== $confirmPassword.val()) {\n                $confirmPassword.parent().addClass('has-error');\n                return;\n            }\n\n            this.client.events.trigger('rooms:update', {\n                id: this.model.id,\n                name: $name.val(),\n                description: $description.val(),\n                password: $password.val(),\n                participants: $participants.val()\n            });\n\n            $modal.modal('hide');\n        },\n        archiveRoom: function(e) {\n            var that = this;\n            swal({\n                title: 'Do you really want to archive \"' +\n                       this.model.get('name') + '\"?',\n                text: \"You will not be able to open it!\",\n                type: \"error\",\n                confirmButtonText: \"Yes, I'm sure\",\n                allowOutsideClick: true,\n                confirmButtonColor: \"#DD6B55\",\n                showCancelButton: true,\n                closeOnConfirm: true,\n            }, function(isConfirm) {\n                if (isConfirm) {\n                    that.$('.lcb-room-edit').modal('hide');\n                    that.client.events.trigger('rooms:archive', {\n                        room: that.model.id\n                    });\n                }\n            });\n        },\n        sendMessage: function(e) {\n            console.log(\"3333333333333333333333333\");\n            if (e.type === 'keypress' && e.keyCode !== 13 || e.altKey) return;\n            if (e.type === 'keypress' && e.keyCode === 13 && e.shiftKey) return;\n            e.preventDefault();\n            if (!this.client.status.get('connected')) return;\n            var $textarea = this.$('.lcb-entry-input');\n            if (!$textarea.val()) return;\n            this.client.events.trigger('messages:send', {\n                room: this.model.id,\n                text: $textarea.val()\n            });\n            $textarea.val('');\n            this.scrollLocked = true;\n            this.scrollMessages();\n        },\n        addMessage: function(message) {\n            // Smells like pasta\n            message.paste = /\\n/i.test(message.text);\n\n            var posted = moment(message.posted);\n\n            // Fragment or new message?\n            message.fragment = this.lastMessageOwner === message.owner.id &&\n                            posted.diff(this.lastMessagePosted, 'minutes') < 2;\n\n            // Mine? Mine? Mine? Mine?\n            message.own = this.client.user.id === message.owner.id;\n\n            // WHATS MY NAME\n            message.mentioned = new RegExp('\\\\B@(' + this.client.user.get('username') + '|all)(?!@)\\\\b', 'i').test(message.text);\n\n            // Templatin' time\n            var $html = $(this.messageTemplate(message).trim());\n            var $text = $html.find('.lcb-message-text');\n\n            var that = this;\n            this.formatMessage($text.html(), function(text) {\n                $text.html(text);\n                $html.find('time').updateTimeStamp();\n                that.$messages.append($html);\n\n                if (!message.fragment) {\n                    that.lastMessagePosted = posted;\n                    that.lastMessageOwner = message.owner.id;\n                }\n\n                that.scrollMessages();\n            });\n\n        },\n        formatMessage: function(text, cb) {\n            var client = this.client;\n            client.getEmotes(function(emotes) {\n                client.getReplacements(function(replacements) {\n                    var data = {\n                        emotes: emotes,\n                        replacements: replacements,\n                        rooms: client.rooms\n                    };\n\n                    var msg = window.utils.message.format(text, data);\n                    cb(msg);\n                });\n            });\n        },\n        updateScrollLock: function() {\n            this.scrollLocked = this.$messages[0].scrollHeight -\n              this.$messages.scrollTop() - 5 <= this.$messages.outerHeight();\n            return this.scrollLocked;\n        },\n        scrollMessages: function(force) {\n            if ((!force && !this.scrollLocked) || this.$el.hasClass('hide')) {\n                return;\n            }\n            this.$messages[0].scrollTop = this.$messages[0].scrollHeight;\n        },\n        toggleSidebar: function(e) {\n            e && e.preventDefault && e.preventDefault();\n            // Target siblings too!\n            this.$el.siblings('.lcb-room').andSelf().toggleClass('lcb-room-sidebar-opened');\n            // Save to localstorage\n            if ($(window).width() > 767) {\n                this.scrollMessages();\n                store.set('sidebar',\n                          this.$el.hasClass('lcb-room-sidebar-opened'));\n            }\n        },\n        destroy: function() {\n            this.undelegateEvents();\n            this.$el.removeData().unbind();\n            this.remove();\n            Backbone.View.prototype.remove.call(this);\n        },\n        poke: function(e) {\n            var $target = $(e.currentTarget),\n                $root = $target.closest('[data-id],[data-owner]'),\n                id = $root.data('owner') || $root.data('id'),\n                user = this.model.users.findWhere({\n                    id: id\n                });\n            if (!user) return;\n            var $input = this.$('.lcb-entry-input'),\n                text = $.trim($input.val()),\n                at = (text.length > 0 ? ' ' : '') + '@' + user.get('username') + ' '\n            $input.val(text + at).focus();\n        },\n        upload: function(e) {\n            e.preventDefault();\n            this.model.trigger('upload:show', this.model);\n        },\n        updateUser: function(user) {\n            var $messages = this.$('.lcb-message[data-owner=\"' + user.id + '\"]');\n            $messages.find('.lcb-message-username').text('@' + user.get('username'));\n            $messages.find('.lcb-message-displayname').text(user.get('displayName'));\n        }\n    });\n\n    window.LCB.RoomSidebarListView = Backbone.View.extend({\n        initialize: function(options) {\n            this.template = Handlebars.compile($(this.templateSelector).html());\n            this.collection.on('add remove', function() {\n                this.count();\n            }, this);\n            this.collection.on('add', function(model) {\n                this.add(model.toJSON());\n            }, this);\n            this.collection.on('change', function(model) {\n                this.update(model.toJSON());\n            }, this);\n            this.collection.on('remove', function(model) {\n                this.remove(model.id);\n            }, this);\n            this.render();\n        },\n        render: function() {\n            this.collection.each(function(model) {\n                this.add(model.toJSON());\n            }, this);\n            this.count();\n        },\n        add: function(model) {\n            this.$('.lcb-room-sidebar-list').prepend(this.template(model));\n        },\n        remove: function(id) {\n            this.$('.lcb-room-sidebar-item[data-id=' + id + ']').remove();\n        },\n        count: function(models) {\n            this.$('.lcb-room-sidebar-items-count').text(this.collection.length);\n        },\n        update: function(model){\n            this.$('.lcb-room-sidebar-item[data-id=' + model.id + ']')\n                .replaceWith(this.template(model));\n        }\n    });\n\n    window.LCB.RoomUsersView = window.LCB.RoomSidebarListView.extend({\n        templateSelector: '#template-user'\n    });\n\n    window.LCB.RoomFilesView = window.LCB.RoomSidebarListView.extend({\n        templateSelector: '#template-file'\n    });\n\n}(window, $, _);","/*\n * STATUS VIEW\n * Shows the user connected/disconnected\n */\n\n'use strict';\n\n+function(window, $, _) {\n\n    window.LCB = window.LCB || {};\n\n    window.LCB.StatusView = Backbone.View.extend({\n        initialize: function(options) {\n            var that = this;\n            this.client = options.client;\n            this.client.status.on('change:connected', function(status, connected) {\n                that.$el.find('[data-status=\"connected\"]').toggle(connected);\n                that.$el.find('[data-status=\"disconnected\"]').toggle(!connected);\n            });\n        }\n    });\n\n}(window, $, _);","/*\n * WINDOW VIEW\n * TODO: Break it up :/\n */\n\n'use strict';\n\n+function(window, $, _, notify) {\n\n    window.LCB = window.LCB || {};\n\n    window.LCB.WindowView = Backbone.View.extend({\n        el: 'html',\n        focus: true,\n        count: 0,\n        mentions: 0,\n        countFavicon: new Favico({\n            position: 'down',\n            animation: 'none',\n            bgColor: '#b94a48'\n        }),\n        mentionsFavicon: new Favico({\n            position: 'left',\n            animation: 'none',\n            bgColor: '#f22472'\n        }),\n        initialize: function(options) {\n\n            var that = this;\n\n            this.client = options.client;\n            this.rooms = options.rooms;\n            this.originalTitle = document.title;\n            this.title = this.originalTitle;\n\n            $(window).on('focus blur', _.bind(this.onFocusBlur, this));\n\n            this.rooms.current.on('change:id', function(current, id) {\n                var room = this.rooms.get(id),\n                    title = room ? room.get('name') : 'Rooms';\n                this.updateTitle(title);\n            }, this);\n\n            this.rooms.on('change:name', function(room) {\n                if (room.id !== this.rooms.current.get('id')) {\n                    return;\n                }\n                this.updateTitle(room.get('name'));\n            }, this);\n\n            this.rooms.on('messages:new', this.onNewMessage, this);\n\n            // Last man standing\n            _.defer(function() {\n                that.updateTitle();\n            });\n\n        },\n        onFocusBlur: function(e) {\n            this.focus = (e.type === 'focus');\n            if (this.focus) {\n                clearInterval(this.titleTimer);\n                clearInterval(this.faviconBadgeTimer);\n                this.count = 0;\n                this.mentions = 0;\n                this.titleTimer = false;\n                this.titleTimerFlip = false;\n                this.faviconBadgeTimer = false;\n                this.faviconBadgeTimerFlip = false;\n                this.updateTitle();\n                this.mentionsFavicon.reset();\n            }\n        },\n        onNewMessage: function(message) {\n            if (this.focus || message.historical || message.owner.id === this.client.user.id) {\n                return;\n            }\n            this.countMessage(message);\n            this.flashTitle()\n            this.flashFaviconBadge();\n        },\n        countMessage: function(message) {\n            ++this.count;\n            message.mentioned && ++this.mentions;\n        },\n        flashTitle: function() {\n            var titlePrefix = '';\n            if (this.count > 0) {\n                titlePrefix += '(' + parseInt(this.count);\n                if (this.mentions > 0) {\n                    titlePrefix += '/' + parseInt(this.mentions) + '@';\n                }\n                titlePrefix += ') ';\n            }\n            document.title = titlePrefix + this.title;\n        },\n        flashFaviconBadge: function() {\n            if (!this.faviconBadgeTimer) {\n                this._flashFaviconBadge();\n                var flashFaviconBadge = _.bind(this._flashFaviconBadge, this);\n                this.faviconBadgeTimer = setInterval(flashFaviconBadge, 1 * 2000);\n            }\n        },\n        _flashFaviconBadge: function() {\n            if (this.mentions > 0 && this.faviconBadgeTimerFlip) {\n                this.mentionsFavicon.badge(this.mentions);\n            } else {\n                this.countFavicon.badge(this.count);\n            }\n            this.faviconBadgeTimerFlip = !this.faviconBadgeTimerFlip;\n        },\n        updateTitle: function(name) {\n            if (!name) {\n                var room = this.rooms.get(this.rooms.current.get('id'));\n                name = (room && room.get('name')) || 'Rooms';\n            }\n            if (name) {\n                this.title = name + ' \\u00B7 ' + this.originalTitle;\n            } else {\n                this.title = this.originalTitle;\n            }\n            document.title = this.title;\n        }\n    });\n\n    window.LCB.HotKeysView = Backbone.View.extend({\n        el: 'html',\n        keys: {\n            'up+shift+alt down+shift+alt': 'nextRoom',\n            's+shift+alt': 'toggleRoomSidebar',\n            'g+shift+alt': 'openGiphyModal',\n            'space+shift+alt': 'recallRoom'\n        },\n        initialize: function(options) {\n            this.client = options.client;\n            this.rooms = options.rooms;\n        },\n        nextRoom: function(e) {\n            var method = e.keyCode === 40 ? 'next' : 'prev',\n                selector = e.keyCode === 40 ? 'first' : 'last',\n                $next = this.$('.lcb-tabs').find('[data-id].selected')[method]();\n            if ($next.length === 0) {\n                $next = this.$('.lcb-tabs').find('[data-id]:' + selector);\n            }\n            this.client.events.trigger('rooms:switch', $next.data('id'));\n        },\n        recallRoom: function() {\n            this.client.events.trigger('rooms:switch', this.rooms.last.get('id'));\n        },\n        toggleRoomSidebar: function(e) {\n            e.preventDefault();\n            var view = this.client.view.panes.views[this.rooms.current.get('id')];\n            view && view.toggleSidebar && view.toggleSidebar();\n        },\n        openGiphyModal: function(e) {\n            if (this.client.options.giphyEnabled) {\n                e.preventDefault();\n                $('.lcb-giphy').modal('show');\n            }\n        }\n    });\n\n    window.LCB.DesktopNotificationsView = Backbone.View.extend({\n        focus: true,\n        openNotifications: [],\n        openMentions: [],\n        initialize: function(options) {\n            notify.config({\n                pageVisibility: false\n            });\n            this.client = options.client;\n            this.rooms = options.rooms;\n            $(window).on('focus blur unload', _.bind(this.onFocusBlur, this));\n            this.rooms.on('messages:new', this.onNewMessage, this);\n        },\n        onFocusBlur: function(e) {\n            this.focus = (e.type === 'focus');\n            _.each(_.merge(this.openNotifications, this.openMentions), function(notification) {\n                notification.close && notification.close();\n            });\n        },\n        onNewMessage: function(message) {\n            if (this.focus || message.historical || message.owner.id === this.client.user.id) {\n                return;\n            }\n            this.createDesktopNotification(message);\n        },\n        createDesktopNotification: function(message) {\n\n            var that = this;\n\n            if (!notify.isSupported ||\n                notify.permissionLevel() != notify.PERMISSION_GRANTED) {\n                return;\n            }\n\n            var roomID = message.room.id,\n                avatar = message.owner.avatar,\n                icon = 'https://www.gravatar.com/avatar/' + avatar + '?s=50',\n                title = message.owner.displayName + ' in ' + message.room.name,\n                mention = message.mentioned;\n\n            var notification = notify.createNotification(title, {\n                body: message.text,\n                icon: icon,\n                tag: message.id,\n                onclick: function() {\n                    window.focus();\n                    that.client.events.trigger('rooms:switch', roomID);\n                }\n            });\n\n            //\n            // Mentions\n            //\n            if (mention) {\n                if (this.openMentions.length > 2) {\n                    this.openMentions[0].close();\n                    this.openMentions.shift();\n                }\n                this.openMentions.push(notification);\n                // Quit early!\n                return;\n            }\n            //\n            // Everything else\n            //\n            if (this.openNotifications.length > 2) {\n                this.openNotifications[0].close();\n                this.openNotifications.shift();\n            }\n            this.openNotifications.push(notification);\n\n            setTimeout(function() {\n                notification.close && notification.close();\n            }, 3000);\n\n        }\n    });\n\n}(window, $, _, notify);","/*\n * TABS/PANES VIEW\n */\n\n'use strict';\n\n+function(window, $, _) {\n\n    window.LCB = window.LCB || {};\n\n    window.LCB.TabsView = Backbone.View.extend({\n        events: {\n            'click .lcb-tab-close': 'leave'\n        },\n        focus: true,\n        initialize: function(options) {\n            this.client = options.client;\n            this.template = Handlebars.compile($('#template-room-tab').html());\n            this.rooms = options.rooms;\n            // Room joining\n            this.rooms.on('change:joined', function(room, joined) {\n                if (joined) {\n                    this.add(room.toJSON());\n                    return;\n                }\n                this.remove(room.id);\n            }, this);\n            // Room meta updates\n            this.rooms.on('change:name change:description', this.update, this);\n            // Current room switching\n            this.rooms.current.on('change:id', function(current, id) {\n                this.switch(id);\n                this.clearAlerts(id);\n            }, this);\n            // Alerts\n            this.rooms.on('messages:new', this.alert, this);\n            // Initial switch since router runs before view is loaded\n            this.switch(this.rooms.current.get('id'));\n            // Blur/Focus events\n            $(window).on('focus blur', _.bind(this.onFocusBlur, this));\n            this.render();\n        },\n        add: function(room) {\n            this.$el.append(this.template(room));\n        },\n        remove: function(id) {\n            this.$el.find('.lcb-tab[data-id=' + id + ']').remove();\n        },\n        update: function(room) {\n            this.$el.find('.lcb-tab[data-id=' + room.id + '] .lcb-tab-title').text(room.get('name'));\n        },\n        switch: function(id) {\n            if (!id) {\n                id = 'list';\n            }\n            this.$el.find('.lcb-tab').removeClass('selected')\n                .filter('[data-id=' + id + ']').addClass('selected');\n        },\n        leave: function(e) {\n            e.preventDefault();\n            var id = $(e.currentTarget).closest('[data-id]').data('id');\n            this.client.events.trigger('rooms:leave', id);\n        },\n        alert: function(message) {\n            var $tab = this.$('.lcb-tab[data-id=' + message.room.id + ']'),\n                $total = $tab.find('.lcb-tab-alerts-total'),\n                $mentions = $tab.find('.lcb-tab-alerts-mentions');\n            if (message.historical || $tab.length === 0\n                    || ((this.rooms.current.get('id') === message.room.id) && this.focus)) {\n                // Nothing to do here!\n                return;\n            }\n            var total = parseInt($tab.data('count-total')) || 0,\n                mentions = parseInt($tab.data('count-mentions')) || 0;\n            // All messages\n            $tab.data('count-total', ++total);\n            $total.text(total);\n            // Just mentions\n            if (new RegExp('\\\\B@(' + this.client.user.get('username') + ')(?!@)\\\\b', 'i').test(message.text)) {\n                $tab.data('count-mentions', ++mentions);\n                $mentions.text(mentions);\n            }\n        },\n        clearAlerts: function(id) {\n            var $tab = this.$('.lcb-tab[data-id=' + id + ']'),\n                $total = $tab.find('.lcb-tab-alerts-total'),\n                $mentions = $tab.find('.lcb-tab-alerts-mentions');\n            $tab.data('count-total', 0).data('count-mentions', 0);\n            $total.text('');\n            $mentions.text('');\n        },\n        onFocusBlur: function(e) {\n            var that = this;\n            this.focus = (e.type === 'focus');\n            clearTimeout(this.clearTimer);\n            if (this.focus) {\n                this.clearTimer = setTimeout(function() {\n                    that.clearAlerts(that.rooms.current.get('id'));\n                }, 1000);\n                return;\n            }\n            that.clearAlerts(that.rooms.current.get('id'));\n        }\n    });\n\n    window.LCB.PanesView = Backbone.View.extend({\n        initialize: function(options) {\n            this.client = options.client;\n            this.template = Handlebars.compile($('#template-room').html());\n            this.rooms = options.rooms;\n            this.views = {};\n            this.rooms.on('change:joined', function(room, joined) {\n                if (joined) {\n                    this.add(room);\n                    return;\n                }\n                this.remove(room.id);\n            }, this);\n            // Switch room\n            this.rooms.current.on('change:id', function(current, id) {\n                this.switch(id);\n            }, this);\n            // Initial switch since router runs before view is loaded\n            this.switch(this.rooms.current.get('id'));\n        },\n        switch: function(id) {\n            if (!id) {\n                id = 'list';\n            }\n            var $pane = this.$el.find('.lcb-pane[data-id=' + id + ']');\n            $pane.removeClass('hide').siblings().addClass('hide');\n            $(window).width() > 767 && $pane.find('[autofocus]').focus();\n            this.views[id] && this.views[id].scrollMessages(true);\n        },\n        add: function(room) {\n            if (this.views[room.id]) {\n                // Nothing to do, this room is already here\n                return;\n            }\n            this.views[room.id] = new window.LCB.RoomView({\n                client: this.client,\n                template: this.template,\n                model: room\n            });\n            this.$el.append(this.views[room.id].$el);\n        },\n        remove: function(id) {\n            if (!this.views[id]) {\n                // Nothing to do here\n                return;\n            }\n            this.views[id].destroy();\n            delete this.views[id];\n        }\n    });\n\n}(window, $, _);","/*\n * MODAL VIEWS\n */\n\n'use strict';\n\n+function(window, $, _) {\n\n    window.LCB = window.LCB || {};\n\n    window.LCB.ModalView = Backbone.View.extend({\n        events: {\n        \t'submit form': 'submit'\n        },\n        initialize: function(options) {\n            this.render();\n        },\n        render: function() {\n            this.$('form.validate').validate();\n            this.$el.on('shown.bs.modal hidden.bs.modal',\n                        _.bind(this.refresh, this));\n        },\n        refresh: function() {\n            var that = this;\n            this.$('[data-model]').each(function() {\n                $(this).val && $(this).val(that.model.get($(this).data('model')));\n            });\n        },\n        success: function() {\n            swal('Updated!', '', 'success');\n            this.$el.modal('hide');\n        },\n        error: function() {\n            swal('Woops!', '', 'error');\n        },\n        submit: function(e) {\n        \te && e.preventDefault();\n\n            var $form = this.$('form[action]');\n            var opts = {\n                type: $form.attr('method') || 'POST',\n                url: $form.attr('action'),\n                data: $form.serialize(),\n                dataType: 'json'\n            };\n\n            if (this.success) {\n                opts.success = _.bind(this.success, this);\n            }\n            if (this.error) {\n                opts.error = _.bind(this.error, this);\n            }\n            if (this.complete) {\n                opts.complete = _.bind(this.complete, this);\n            }\n\n            $.ajax(opts);\n        }\n    });\n\n    window.LCB.ProfileModalView = window.LCB.ModalView.extend({\n        success: function() {\n            swal('Profile Updated!', 'Your profile has been updated.',\n                 'success');\n            this.$el.modal('hide');\n        },\n        error: function() {\n            swal('Woops!', 'Your profile was not updated.', 'error');\n        }\n    });\n\n    window.LCB.AccountModalView = window.LCB.ModalView.extend({\n        success: function() {\n            swal('Account Updated!', 'Your account has been updated.', 'success');\n            this.$el.modal('hide');\n            this.$('[type=\"password\"]').val('');\n        },\n        error: function(req) {\n            var message = req.responseJSON && req.responseJSON.reason ||\n                          'Your account was not updated.';\n\n            swal('Woops!', message, 'error');\n        },\n        complete: function() {\n            this.$('[name=\"current-password\"]').val('');\n        }\n    });\n\n    window.LCB.RoomPasswordModalView = Backbone.View.extend({\n        events: {\n            'click .btn-primary': 'enterRoom'\n        },\n        initialize: function(options) {\n            this.render();\n            this.$name = this.$('.lcb-room-password-name');\n            this.$password = this.$('input.lcb-room-password-required');\n        },\n        render: function() {\n            // this.$el.on('shown.bs.modal hidden.bs.modal',\n            //             _.bind(this.refresh, this));\n        },\n        show: function(options) {\n            this.callback = options.callback;\n            this.$password.val('');\n            this.$name.text(options.roomName || '');\n            this.$el.modal('show');\n        },\n        enterRoom: function() {\n            this.$el.modal('hide');\n            this.callback(this.$password.val());\n        }\n    });\n\n    window.LCB.AuthTokensModalView = Backbone.View.extend({\n        events: {\n            'click .generate-token': 'generateToken',\n            'click .revoke-token': 'revokeToken'\n        },\n        initialize: function(options) {\n            this.render();\n        },\n        render: function() {\n            this.$el.on('shown.bs.modal hidden.bs.modal',\n                        _.bind(this.refresh, this));\n        },\n        refresh: function() {\n            this.$('.token').val('');\n            this.$('.generated-token').hide();\n        },\n        getToken: function() {\n            var that = this;\n            $.post('./account/token/generate', function(data) {\n                if (data.token) {\n                    that.$('.token').val(data.token);\n                    that.$('.generated-token').show();\n                }\n            });\n        },\n        removeToken: function() {\n            var that = this;\n            $.post('./account/token/revoke', function(data) {\n                that.refresh();\n                swal('Success', 'Authentication token revoked!', 'success');\n            });\n        },\n        generateToken: function() {\n            swal({\n                title: 'Are you sure?',\n                text: 'This will overwrite any existing authentication token you may have.',   type: 'warning',\n                showCancelButton: true,\n                confirmButtonText: 'Yes',\n                closeOnConfirm: true },\n                _.bind(this.getToken, this)\n            );\n        },\n        revokeToken: function() {\n            swal({\n                title: 'Are you sure?',\n                text: 'This will revoke access from any process using your current authentication token.',   type: 'warning',\n                showCancelButton: true,\n                confirmButtonText: 'Yes',\n                closeOnConfirm: false },\n                _.bind(this.removeToken, this)\n            );\n        }\n    });\n\n    window.LCB.NotificationsModalView = Backbone.View.extend({\n        events: {\n            'click [name=desktop-notifications]': 'toggleDesktopNotifications'\n        },\n        initialize: function() {\n            this.render();\n        },\n        render: function() {\n            var $input = this.$('[name=desktop-notifications]');\n            $input.find('.disabled').show()\n              .siblings().hide();\n            if (!notify.isSupported) {\n                $input.attr('disabled', true);\n                // Welp we're done here\n                return;\n            }\n            if (notify.permissionLevel() === notify.PERMISSION_GRANTED) {\n                $input.find('.enabled').show()\n                  .siblings().hide();\n            }\n            if (notify.permissionLevel() === notify.PERMISSION_DENIED) {\n                $input.find('.blocked').show()\n                  .siblings().hide();\n            }\n        },\n        toggleDesktopNotifications: function() {\n            var that = this;\n            if (!notify.isSupported) {\n                return;\n            }\n            notify.requestPermission(function() {\n                that.render();\n            });\n        }\n    });\n\n    window.LCB.GiphyModalView = Backbone.View.extend({\n        events: {\n            'keypress .search-giphy': 'stopReturn',\n            'keyup .search-giphy': 'loadGifs'\n        },\n        initialize: function(options) {\n            this.render();\n        },\n        render: function() {\n            this.$el.on('shown.bs.modal hidden.bs.modal',\n                        _.bind(this.refresh, this));\n        },\n        refresh: function() {\n            this.$el.find('.giphy-results ul').empty();\n            this.$('.search-giphy').val('').focus();\n        },\n        stopReturn: function(e) {\n            if(e.keyCode === 13) {\n                return false;\n            }\n        },\n        loadGifs: _.debounce(function() {\n            var that = this;\n            var search = this.$el.find('.search-giphy').val();\n\n            $.get('https://api.giphy.com/v1/gifs/search', {\n                q: search,\n                rating: this.$el.data('rating'),\n                limit: this.$el.data('limit'),\n                api_key: this.$el.data('apikey')\n            })\n            .done(function(result) {\n                var images = result.data.filter(function(entry) {\n                    return entry.images.fixed_width.url;\n                }).map(function(entry) {\n                    return entry.images.fixed_width.url;\n                });\n\n                that.appendGifs(images);\n            });\n        }, 400),\n        appendGifs: function(images) {\n            var eles = images.map(function(url) {\n                var that = this;\n                var $img = $('<img src=\"' + url +\n                       '\" alt=\"gif\" data-dismiss=\"modal\"/></li>');\n\n                $img.click(function() {\n                    var src = $(this).attr('src');\n                    $('.lcb-entry-input:visible').val(src);\n                    $('.lcb-entry-button:visible').click();\n                    that.$el.modal('hide');\n                });\n\n                return $(\"<li>\").append($img);\n            }, this);\n\n            var $div = this.$el.find('.giphy-results ul');\n\n            $div.empty();\n\n            eles.forEach(function($ele) {\n                $div.append($ele);\n            });\n        }\n    });\n\n}(window, $, _);","/*\n * UPLOAD/FILE VIEWS\n * The king of all views.\n */\n\n'use strict';\n\nDropzone && (Dropzone.autoDiscover = false);\n\n+function(window, $, _) {\n\n    window.LCB = window.LCB || {};\n\n    window.LCB.UploadView = Backbone.View.extend({\n        events: {\n            'submit form': 'submit'\n        },\n        initialize: function(options) {\n            this.template = $('#template-upload').html();\n            this.rooms = options.rooms;\n            this.rooms.current.on('change:id', this.setRoom, this);\n            this.rooms.on('add remove', this.populateRooms, this);\n            this.rooms.on('change:joined', this.populateRooms, this);\n            this.rooms.on('upload:show', this.show, this);\n            this.render();\n        },\n        render: function() {\n            //\n            // Dropzone\n            //\n            var $ele = this.$el.closest('.lcb-client').get(0);\n            this.dropzone = new Dropzone($ele, {\n                url: './files',\n                autoProcessQueue: false,\n                clickable: [this.$('.lcb-upload-target').get(0)],\n                previewsContainer: this.$('.lcb-upload-preview-files').get(0),\n                addRemoveLinks: true,\n                dictRemoveFile: 'Remove',\n                parallelUploads: 8,\n                maxFiles: 8,\n                previewTemplate: this.template\n            });\n            this.dropzone\n                .on('sending', _.bind(this.sending, this))\n                .on('sendingmultiple', _.bind(this.sending, this))\n                .on('addedfile', _.bind(this.show, this))\n                .on('queuecomplete', _.bind(this.complete, this));\n            //\n            // Selectize\n            //\n            this.selectize = this.$('select[name=\"room\"]').selectize({\n                valueField: 'id',\n\t\t\t\tlabelField: 'name',\n\t\t\t\tsearchField: 'name'\n            }).get(0).selectize;\n            //\n            // Modal events\n            //\n            this.$el.on('hidden.bs.modal', _.bind(this.clear, this));\n            this.$el.on('shown.bs.modal', _.bind(this.setRoom, this));\n        },\n        show: function() {\n            this.$el.modal('show');\n        },\n        hide: function() {\n            this.$el.modal('hide');\n        },\n        clear: function() {\n            this.dropzone.removeAllFiles();\n        },\n        complete: function(e) {\n            var remaining = _.some(this.dropzone.files, function(file) {\n                return file.status !== 'success';\n            });\n            if (remaining) {\n                swal('Woops!', 'There were some issues uploading your files.', 'warning');\n                return;\n            }\n            this.hide();\n            swal('Success', 'Files uploaded!', 'success');\n        },\n        sending: function(file, xhr, formData) {\n            formData.append('room', this.$('select[name=\"room\"]').val());\n            formData.append('post', this.$('input[name=\"post\"]').is(':checked'));\n        },\n        submit: function(e) {\n            e.preventDefault();\n            if (!this.$('select[name=\"room\"]').val()) {\n                swal('Woops!', 'Please specify a room.', 'warning');\n                return;\n            }\n            this.dropzone.processQueue();\n        },\n        setRoom: function() {\n            this.selectize.setValue(this.rooms.current.id);\n        },\n        populateRooms: function() {\n            this.selectize.clearOptions();\n            this.rooms.each(function(room) {\n                if (room.get('joined')) {\n                    this.selectize.addOption({\n                        id: room.id,\n                        name: room.get('name')\n                    });\n                }\n            }, this);\n        }\n    });\n\n}(window, $, _);","/*\n * CLIENT VIEW\n * The king of all views.\n */\n\n'use strict';\n\n+function(window, $, _) {\n\n    window.LCB = window.LCB || {};\n\n    window.LCB.ClientView = Backbone.View.extend({\n        el: '#lcb-client',\n        events: {\n            'click .lcb-tab': 'toggleSideBar',\n            'click .lcb-header-toggle': 'toggleSideBar'\n        },\n        initialize: function(options) {\n            this.client = options.client;\n            //\n            // Subviews\n            //\n            this.browser = new window.LCB.BrowserView({\n                el: this.$el.find('.lcb-rooms-browser'),\n                rooms: this.client.rooms,\n                client: this.client\n            });\n            this.tabs = new window.LCB.TabsView({\n                el: this.$el.find('.lcb-tabs'),\n                rooms: this.client.rooms,\n                client: this.client\n            });\n            this.panes = new window.LCB.PanesView({\n                el: this.$el.find('.lcb-panes'),\n                rooms: this.client.rooms,\n                client: this.client\n            });\n            this.window = new window.LCB.WindowView({\n                rooms: this.client.rooms,\n                client: this.client\n            });\n            this.hotKeys = new window.LCB.HotKeysView({\n                rooms: this.client.rooms,\n                client: this.client\n            });\n            this.status = new window.LCB.StatusView({\n                el: this.$el.find('.lcb-status-indicators'),\n                client: this.client\n            });\n            this.accountButton = new window.LCB.AccountButtonView({\n                el: this.$el.find('.lcb-account-button'),\n                model: this.client.user\n            });\n            this.desktopNotifications = new window.LCB.DesktopNotificationsView({\n                rooms: this.client.rooms,\n                client: this.client\n            });\n            if (this.client.options.filesEnabled) {\n                this.upload = new window.LCB.UploadView({\n                    el: this.$el.find('#lcb-upload'),\n                    rooms: this.client.rooms\n                });\n            }\n\n            //\n            // Modals\n            //\n            this.profileModal = new window.LCB.ProfileModalView({\n                el: this.$el.find('#lcb-profile'),\n                model: this.client.user\n            });\n            this.accountModal = new window.LCB.AccountModalView({\n                el: this.$el.find('#lcb-account'),\n                model: this.client.user\n            });\n            this.tokenModal = new window.LCB.AuthTokensModalView({\n                el: this.$el.find('#lcb-tokens')\n            });\n            this.notificationsModal = new window.LCB.NotificationsModalView({\n                el: this.$el.find('#lcb-notifications')\n            });\n            this.giphyModal = new window.LCB.GiphyModalView({\n                el: this.$el.find('#lcb-giphy')\n            });\n            //\n            // Misc\n            //\n            this.client.status.once('change:connected', _.bind(function(status, connected) {\n                this.$el.find('.lcb-client-loading').hide(connected);\n            }, this));\n            return this;\n        },\n        toggleSideBar: function(e) {\n            this.$el.toggleClass('lcb-sidebar-opened');\n        }\n    });\n\n    window.LCB.AccountButtonView = Backbone.View.extend({\n        initialize: function() {\n            this.model.on('change', this.update, this);\n        },\n        update: function(user){\n            this.$('.lcb-account-button-username').text('@' + user.get('username'));\n            this.$('.lcb-account-button-name').text(user.get('displayName'));\n        }\n    });\n\n\n}(window, $, _);","//\n// LCB Client\n//\n\n(function(window, $, _) {\n\n    //\n    // Base\n    //\n    var Client = function(options) {\n        this.options = options;\n        this.status = new Backbone.Model();\n        this.user = new UserModel();\n        this.users = new UsersCollection();\n        this.rooms = new RoomsCollection();\n        this.events = _.extend({}, Backbone.Events);\n        return this;\n    };\n    //\n    // Account\n    //\n    Client.prototype.getUser = function() {\n        var that = this;\n        this.socket.emit('account:whoami', function(user) {\n            that.user.set(user);\n        });\n    };\n    Client.prototype.updateProfile = function(profile) {\n        var that = this;\n        this.socket.emit('account:profile', profile, function(user) {\n            that.user.set(user);\n        });\n    };\n\n    //\n    // Rooms\n    //\n    Client.prototype.createRoom = function(data) {\n        var that = this;\n        var room = {\n            name: data.name,\n            slug: data.slug,\n            description: data.description,\n            password: data.password,\n            participants: data.participants,\n            private: data.private\n        };\n        var callback = data.callback;\n        this.socket.emit('rooms:create', room, function(room) {\n            if (room && room.errors) {\n                swal(\"Unable to create room\",\n                     \"Room slugs can only contain lower case letters, numbers or underscores!\",\n                     \"error\");\n            } else if (room && room.id) {\n                that.addRoom(room);\n                that.switchRoom(room.id);\n            }\n            callback && callback(room);\n        });\n    };\n    Client.prototype.getRooms = function(cb) {\n        var that = this;\n        this.socket.emit('rooms:list', { users: true }, function(rooms) {\n            that.rooms.set(rooms);\n            // Get users for each room!\n            // We do it here for the room browser\n            _.each(rooms, function(room) {\n                if (room.users) {\n                    that.setUsers(room.id, room.users);\n                }\n            });\n\n            if (cb) {\n                cb(rooms);\n            }\n        });\n    };\n    Client.prototype.switchRoom = function(id) {\n        // Make sure we have a last known room ID\n        this.rooms.last.set('id', this.rooms.current.get('id'));\n        if (!id || id === 'list') {\n            this.rooms.current.set('id', 'list');\n            this.router.navigate('!/', {\n                replace: true\n            });\n            return;\n        }\n        var room = this.rooms.get(id);\n        if (room && room.get('joined')) {\n            this.rooms.current.set('id', id);\n            this.router.navigate('!/room/' + room.id, {\n                replace: true\n            });\n            return;\n        } else if(room) {\n            this.joinRoom(room, true);\n        } else {\n            this.joinRoom({id: id}, true);\n        }\n    };\n    Client.prototype.updateRoom = function(room) {\n        this.socket.emit('rooms:update', room);\n    };\n    Client.prototype.roomUpdate = function(resRoom) {\n        var room = this.rooms.get(resRoom.id);\n        if (!room) {\n            this.addRoom(resRoom);\n            return;\n        }\n        room.set(resRoom);\n    };\n    Client.prototype.addRoom = function(room) {\n        var r = this.rooms.get(room.id);\n        if (r) {\n            return r;\n        }\n        return this.rooms.add(room);\n    };\n    Client.prototype.archiveRoom = function(options) {\n        this.socket.emit('rooms:archive', options, function(data) {\n            if (data !== 'No Content') {\n                swal('Unable to Archive!',\n                     'Unable to archive this room!',\n                     'error');\n            }\n        });\n    };\n    Client.prototype.roomArchive = function(room) {\n        this.leaveRoom(room.id);\n        this.rooms.remove(room.id);\n    };\n    Client.prototype.rejoinRoom = function(room) {\n        this.joinRoom(room, undefined, true);\n    };\n    Client.prototype.lockJoin = function(id) {\n        if (_.contains(this.joining, id)) {\n            return false;\n        }\n\n        this.joining = this.joining || [];\n        this.joining.push(id);\n        return true;\n    };\n    Client.prototype.unlockJoin = function(id) {\n        var that = this;\n        _.defer(function() {\n            that.joining = _.without(that.joining, id);\n        });\n    };\n    Client.prototype.joinRoom = function(room, switchRoom, rejoin) {\n        if (!room || !room.id) {\n            return;\n        }\n\n        var that = this;\n        var id = room.id;\n        var password = room.password;\n\n        if (!rejoin) {\n            // Must not have already joined\n            var room1 = that.rooms.get(id);\n            if (room1 && room1.get('joined')) {\n                return;\n            }\n        }\n\n        if (!this.lockJoin(id)) {\n            return;\n        }\n\n        var passwordCB = function(password) {\n            room.password = password;\n            that.joinRoom(room, switchRoom, rejoin);\n        };\n\n        this.socket.emit('rooms:join', {roomId: id, password: password}, function(resRoom) {\n            // Room was likely archived if this returns\n            if (!resRoom) {\n                return;\n            }\n\n            if (resRoom && resRoom.errors &&\n                resRoom.errors === 'password required') {\n\n                that.passwordModal.show({\n                    roomName: resRoom.roomName,\n                    callback: passwordCB\n                });\n\n                that.unlockJoin(id);\n                return;\n            }\n\n            if (resRoom && resRoom.errors) {\n                that.unlockJoin(id);\n                return;\n            }\n\n            var room = that.addRoom(resRoom);\n            room.set('joined', true);\n\n            if (room.get('hasPassword')) {\n                that.getRoomUsers(room.id, _.bind(function(users) {\n                    this.setUsers(room.id, users);\n                }, that));\n            }\n\n            // Get room history\n            that.getMessages({\n                room: room.id,\n                since_id: room.lastMessage.get('id'),\n                take: 200,\n                expand: 'owner, room',\n                reverse: true\n            }, function(messages) {\n                messages.reverse();\n                that.addMessages(messages, !rejoin && !room.lastMessage.get('id'));\n                !rejoin && room.lastMessage.set(messages[messages.length - 1]);\n            });\n\n            if (that.options.filesEnabled) {\n                that.getFiles({\n                    room: room.id,\n                    take: 15\n                }, function(files) {\n                    files.reverse();\n                    that.setFiles(room.id, files);\n                });\n            }\n            // Do we want to switch?\n            if (switchRoom) {\n                that.switchRoom(id);\n            }\n            //\n            // Add room id to User Open rooms list.\n            //\n\n            var orooms = that.user.get('openRooms');\n            if ( ! _.contains(orooms,id)) {\n              orooms.push(id);\n            }\n            that.socket.emit('account:profile', {'openRooms': orooms });\n\n            that.unlockJoin(id);\n        });\n    };\n    Client.prototype.leaveRoom = function(id) {\n        var room = this.rooms.get(id);\n        if (room) {\n            room.set('joined', false);\n            room.lastMessage.clear();\n            if (room.get('hasPassword')) {\n                room.users.set([]);\n            }\n        }\n        this.socket.emit('rooms:leave', id);\n        if (id === this.rooms.current.get('id')) {\n            var room = this.rooms.get(this.rooms.last.get('id'));\n            this.switchRoom(room && room.get('joined') ? room.id : '');\n        }\n        // Remove room id from User open rooms list.\n        var orooms = this.user.get('openRooms');\n        orooms = _.without(orooms, id);\n        this.socket.emit('account:profile', {'openRooms': orooms});\n\n    };\n    Client.prototype.getRoomUsers = function(id, callback) {\n        this.socket.emit('rooms:users', {\n            room: id\n        }, callback);\n    };\n    //\n    // Messages\n    //\n    Client.prototype.addMessage = function(message) {\n        var room = this.rooms.get(message.room);\n        if (!room || !message) {\n            // Unknown room, nothing to do!\n            return;\n        }\n        room.set('lastActive', message.posted);\n        if (!message.historical) {\n            room.lastMessage.set(message);\n        }\n        room.trigger('messages:new', message);\n    };\n    Client.prototype.addMessages = function(messages, historical) {\n        _.each(messages, function(message) {\n            if (historical) {\n                message.historical = true;\n            }\n            this.addMessage(message);\n        }, this);\n    };\n    Client.prototype.sendMessage = function(message) {\n        this.socket.emit('messages:create', message);\n    };\n    Client.prototype.getMessages = function(query, callback) {\n        this.socket.emit('messages:list', query, callback);\n    };\n    //\n    // Files\n    //\n    Client.prototype.getFiles = function(query, callback) {\n        this.socket.emit('files:list', {\n            room: query.room || '',\n            take: query.take || 40,\n            expand: query.expand || 'owner'\n        }, callback);\n    };\n    Client.prototype.setFiles = function(roomId, files) {\n        if (!roomId || !files || !files.length) {\n            // Nothing to do here...\n            return;\n        }\n        var room = this.rooms.get(roomId);\n        if (!room) {\n            // No room\n            return;\n        }\n        room.files.set(files);\n    };\n    Client.prototype.addFile = function(file) {\n        var room = this.rooms.get(file.room);\n        if (!room) {\n            // No room\n            return;\n        }\n        room.files.add(file);\n    };\n    //\n    // Users\n    //\n    Client.prototype.setUsers = function(roomId, users) {\n        if (!roomId || !users || !users.length) {\n            // Data is not valid\n            return;\n        }\n        var room = this.rooms.get(roomId);\n        if (!room) {\n            // No room\n            return;\n        }\n        room.users.set(users);\n    };\n    Client.prototype.addUser = function(user) {\n        var room = this.rooms.get(user.room);\n        if (!room) {\n            // No room\n            return;\n        }\n        room.users.add(user);\n    };\n    Client.prototype.removeUser = function(user) {\n        var room = this.rooms.get(user.room);\n        if (!room) {\n            // No room\n            return;\n        }\n        room.users.remove(user.id);\n    };\n    Client.prototype.updateUser = function(user) {\n        // Update if current user\n        if (user.id == this.user.id) {\n            this.user.set(user);\n        }\n        // Update all rooms\n        this.rooms.each(function(room) {\n            var target = room.users.findWhere({\n                id: user.id\n            });\n            target && target.set(user);\n        }, this);\n    };\n    Client.prototype.getUsersSync = function() {\n        if (this.users.length) {\n            return this.users;\n        }\n\n        var that = this;\n\n        function success(users) {\n            that.users.set(users);\n        }\n\n        $.ajax({url:'./users', async: false, success: success});\n\n        return this.users;\n    };\n    //\n    // Extras\n    //\n    Client.prototype.getEmotes = function(callback) {\n        this.extras = this.extras || {};\n        if (!this.extras.emotes) {\n            // Use AJAX, so we can take advantage of HTTP caching\n            // Also, it's a promise - which ensures we only load emotes once\n            this.extras.emotes = $.get('./extras/emotes');\n        }\n        if (callback) {\n            this.extras.emotes.done(callback);\n        }\n    };\n    Client.prototype.getReplacements = function(callback) {\n        this.extras = this.extras || {};\n        if (!this.extras.replacements) {\n            // Use AJAX, so we can take advantage of HTTP caching\n            // Also, it's a promise - which ensures we only load emotes once\n            this.extras.replacements = $.get('./extras/replacements');\n        }\n        if (callback) {\n            this.extras.replacements.done(callback);\n        }\n    };\n\n    //\n    // Router Setup\n    //\n    Client.prototype.route = function() {\n        var that = this;\n        var Router = Backbone.Router.extend({\n            routes: {\n                '!/room/': 'list',\n                '!/room/:id': 'join',\n                '*path': 'list'\n            },\n            join: function(id) {\n                that.switchRoom(id);\n            },\n            list: function() {\n                that.switchRoom('list');\n            }\n        });\n        this.router = new Router();\n        Backbone.history.start();\n    };\n    //\n    // Listen\n    //\n    Client.prototype.listen = function() {\n        var that = this;\n\n        function joinRooms(rooms) {\n            //\n            // Join rooms from User's open Rooms List.\n            // We need to check each room is available before trying to join\n            //\n            var roomIds = _.map(rooms, function(room) {\n                return room.id;\n            });\n\n            var openRooms = that.user.get('openRooms') || [];\n\n            // Let's open some rooms!\n            _.defer(function() {\n                //slow down because router can start a join with no password\n                _.each(openRooms, function(id) {\n                    if (_.contains(roomIds, id)) {\n                        that.joinRoom({ id: id });\n                    }\n                });\n            }.bind(this));\n        }\n\n        var path = '/' + _.compact(\n            window.location.pathname.split('/').concat(['socket.io'])\n        ).join('/');\n\n        //\n        // Socket\n        //\n        this.socket = io.connect({\n            path: path,\n            reconnection: true,\n            reconnectionDelay: 500,\n            reconnectionDelayMax: 1000,\n            timeout: 3000\n        });\n        this.socket.on('connect', function() {\n            that.getUser();\n            that.getRooms(joinRooms);\n            that.status.set('connected', true);\n        });\n        this.socket.on('reconnect', function() {\n            _.each(that.rooms.where({ joined: true }), function(room) {\n                that.rejoinRoom(room);\n            });\n        });\n        this.socket.on('messages:new', function(message) {\n            that.addMessage(message);\n        });\n        this.socket.on('rooms:new', function(data) {\n            that.addRoom(data);\n        });\n        this.socket.on('rooms:update', function(room) {\n            that.roomUpdate(room);\n        });\n        this.socket.on('rooms:archive', function(room) {\n            that.roomArchive(room);\n        });\n        this.socket.on('users:join', function(user) {\n            that.addUser(user);\n        });\n        this.socket.on('users:leave', function(user) {\n            that.removeUser(user);\n        });\n        this.socket.on('users:update', function(user) {\n            that.updateUser(user);\n        });\n        this.socket.on('files:new', function(file) {\n            that.addFile(file);\n        });\n        this.socket.on('disconnect', function() {\n            that.status.set('connected', false);\n        });\n        //\n        // GUI\n        //\n        this.events.on('messages:send', this.sendMessage, this);\n        this.events.on('rooms:update', this.updateRoom, this);\n        this.events.on('rooms:leave', this.leaveRoom, this);\n        this.events.on('rooms:create', this.createRoom, this);\n        this.events.on('rooms:switch', this.switchRoom, this);\n        this.events.on('rooms:archive', this.archiveRoom, this);\n        this.events.on('profile:update', this.updateProfile, this);\n        this.events.on('rooms:join', this.joinRoom, this);\n    };\n    //\n    // Start\n    //\n    Client.prototype.start = function() {\n        this.getEmotes();\n        this.getReplacements();\n        this.listen();\n        this.route();\n        this.view = new window.LCB.ClientView({\n            client: this\n        });\n        this.passwordModal = new window.LCB.RoomPasswordModalView({\n            el: $('#lcb-password')\n        });\n        return this;\n    };\n    //\n    // Add to window\n    //\n    window.LCB = window.LCB || {};\n    window.LCB.Client = Client;\n})(window, $, _);","//(=) require util/message.js\n//(=) require models.js\n//(=) require views/browser.js\n//(=) require views/room.js\n//(=) require views/status.js\n//(=) require views/window.js\n//(=) require views/panes.js\n//(=) require views/modals.js\n//(=) require views/upload.js\n//(=) require views/client.js\n//(=) require client.js\n\n$(function() {\n    window.client = new window.LCB.Client({\n        filesEnabled: $('#lcb-upload').length > 0,\n        giphyEnabled: $('#lcb-giphy').length > 0\n    });\n    window.client.start();\n});"],"sourceRoot":"/"}